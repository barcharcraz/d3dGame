#tell MSVC to use the static CRT
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/cmake/cxx_flag_overrides.cmake)
project (d3dgame)
cmake_minimum_required(VERSION 2.8)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
if(NOT DEFINED DEPENDENCIES_DOWNLOADALL)
    SET(DEPENDENCIES_DOWNLOADALL OFF CACHE BOOL "Download all dependencies with ExtenalProject")
    return()
endif(NOT DEFINED DEPENDENCIES_DOWNLOADALL)
if(DEPENDENCIES_DOWNLOADALL)
    include(ExternalProject)
    include(external_projects)
    install_eigen()
	install_glfw3()
	install_gtest()
endif(DEPENDENCIES_DOWNLOADALL) 

find_package(Eigen3 CONFIG)
find_package(glfw CONFIG)
find_package(GTest)
find_package(OpenGL)

if(GTEST_FOUND)
    message("gtest found with link libs ${GTEST_LIBRARIES}")
else()
    message("gtest not found")
endif()

include_directories(${EIGEN_INCLUDE_DIR} ${PROJECT_SOURCE_DIR})
IF(USE_GLFW)
include_directories( ${GLFW_INCLUDE_DIR} )
ENDIF()

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/output)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/output)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/output)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
IF(CMAKE_COMPILER_IS_GNUCXX)
	add_definitions(-std=c++11 -Wall)
ENDIF(CMAKE_COMPILER_IS_GNUCXX)
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    add_definitions(-std=c++11 -Wall -pedantic -Wno-missing-braces)
ENDIF()

include(CMakeDependentOption)
#openGL/DX options/defaults
OPTION(USE_OPENGL "build with opengl support" ON)
OPTION(USE_DIRECT3D "build with direct3d support" OFF)
OPTION(USE_GLFW "use glfw for windowing" ON)



#config.h configuration
INCLUDE(CheckCXXSourceCompiles)
#check for make_unique
CHECK_CXX_SOURCE_COMPILES(
"
#include <memory>
int main() {
	std::unique_ptr<int> foo = std::make_unique<int>(4);
}
" HAS_MAKE_UNIQUE)


CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/config.h)
IF(WIN32)
add_definitions(-DUINCODE -D_UNICODE /W4)
set(CMAKE_EXE_LINKER_FLAGS /ENTRY:"wWinMainCRTStartup")
ENDIF(WIN32)
IF(APPLE)
	set(CMAKE_EXE_LINKER_FLAGS "-framework OpenGL -framework IOKit -framework Cocoa")
ENDIF(APPLE)
add_custom_target(Glue SOURCES windowing.h Components2D.h Components3D.h Components.h Rendering.h)


if(GTEST_FOUND)
    enable_testing()
    add_subdirectory(Tests)
endif(GTEST_FOUND)
add_subdirectory(LibCommon)
add_subdirectory(assets)
add_subdirectory(Utils)
add_subdirectory(LibComponents)
add_subdirectory(LibComponents2D)
add_subdirectory(LibInput)
add_subdirectory(LibSystems)
add_subdirectory(LibImage)
add_subdirectory(LibPrefabs)
add_subdirectory(LibPrefabs2D)
add_subdirectory(LibEffects)
add_subdirectory(LibPhysics)
IF(USE_DIRECT3D)
add_subdirectory(LibHLSL)
add_subdirectory(HLSLShaders)
add_subdirectory(LibDirect3D)
add_subdirectory(LibDirect2D)
add_subdirectory(LibDXGI)
ENDIF(USE_DIRECT3D)
IF(WIN32)
add_subdirectory(windows)
add_subdirectory(SimpleEditor)
ENDIF(WIN32)
IF(HAS_X11)
add_subdirectory(LibXWindows)
ENDIF(HAS_X11)
IF(USE_OPENGL)
	add_subdirectory(LibOpenGL)
	IF(HAS_GLX)
	add_subdirectory(LibGLX)
	ENDIF(HAS_GLX)
	IF(USE_GLFW)
	add_subdirectory(LibGLFW)
	ENDIF(USE_GLFW)
	add_subdirectory(LibGLSL)
	add_subdirectory(GLSLShaders)
ENDIF(USE_OPENGL)
add_subdirectory(CrossplatApp)
add_subdirectory(LibCairo)
add_subdirectory(RenderingUtils)
add_subdirectory(LibAssets)
